cache:
  untracked: true
  key: $CI_COMMIT_REF_NAME
  paths:
    - .yarn-cache/

variables:
  # From the docs: https://docs.gitlab.com/ee/ci/yaml/#git-strategy
  #   „fetch is faster as it re-uses the project workspace (falling back
  #   to clone if it doesn't exist). git clean is used to undo any changes
  #   made by the last job, and git fetch is used to retrieve commits
  #   made since the last job ran.“
  GIT_STRATEGY: fetch

  # The 'latest' image. Used as a base to cache from
  # when building the $BUILD_IMAGE.
  SERVICE_NAME: claim-brk

stages:
  - setup
  - test
  - build
  - deploy
  - stop-review

before_script:
  - eval export REGISTRY_URL="eu.gcr.io/sonorous-cacao-185213/${SERVICE_NAME}"
  - eval export SHORT_GIT_SHA=$(git rev-parse --short HEAD)
  - eval export SANITIZED_BRANCH_NAME=$(echo $CI_COMMIT_REF_NAME | sed -e "s/\//-/g")
  # The image tag of this build
  - eval export BUILD_IMAGE=${REGISTRY_URL}:${SANITIZED_BRANCH_NAME}-${SHORT_GIT_SHA}
  - eval export CACHE_TAG=${REGISTRY_URL}:cache
  # The fqdn of the gitlab server is not available in the standard env vars so we cut it out of this URL
  - eval export GITLAB_HOSTNAME=$(echo $CI_PROJECT_URL | awk -F/ '{print $3}')

setup:
  stage: setup
  artifacts:
    expire_in: 3d
    paths:
      - node_modules
  script:
    - eval `ssh-agent -s`
    - ssh-add <(echo "$GITLAB_BOT_SSH_KEY")
    - yarn install --pure-lockfile --cache-folder .yarn-cache

build-and-push-docker-image:
  stage: build
  # This is OR logic. The commit should be in master OR be tagged
  cache:
    policy: pull
  script:
    - gcloud docker --authorize-only
    # Using `--pull` makes sure that Docker fetches any changes to the $RELEASE_IMAGE before building
    # just in case our cache is stale. It takes slightly longer, but means we don’t get stuck without
    # potential security patches to base images.
    #
    # Using `--cache-from $RELEASE_IMAGE` can speed  up building the $BUILD_IMAGE
    # https://medium.com/@gajus/making-docker-in-docker-builds-x2-faster-using-docker-cache-from-option-c01febd8ef84
    - docker build --pull --cache-from $CACHE_TAG --tag $BUILD_IMAGE --build-arg GITLAB_BOT_SSH_KEY="$GITLAB_BOT_SSH_KEY" .
    - docker push $BUILD_IMAGE
    - docker tag $BUILD_IMAGE $CACHE_TAG
    - docker push $CACHE_TAG

deploy-review:
  stage: deploy
  environment:
    name: rev-${SERVICE_NAME}--$CI_BUILD_REF_NAME
    url: https://rev-${SERVICE_NAME}--$CI_COMMIT_REF_SLUG.brickblock-cloud.io
    on_stop: stop-review
  only:
    - branches
  except:
    - master
  tags:
    - google
  variables:
    MYSQL_INSTANCE: sonorous-cacao-185213:europe-west1:ico-claimants-data
    MYSQL_DATABASE: rev-${SERVICE_NAME}--$CI_COMMIT_REF_SLUG
  script:
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_JOB_TOKEN
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOSTNAME}/infrastructure/infra.git
    - /bin/bash $(pwd)/infra/k8s-db/deploy.sh rev-clm-brk--$CI_COMMIT_REF_SLUG

stop-review:
  stage: stop-review
  environment:
    name: rev-${SERVICE_NAME}--$CI_BUILD_REF_NAME
    action: stop
  when: manual
  tags:
    - google
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOSTNAME}/infrastructure/infra.git
    - /bin/bash $(pwd)/infra/k8s-db/purge.sh rev-clm-brk--$CI_COMMIT_REF_SLUG
  only:
    - branches
  except:
    - master

deploy-staging:
  stage: deploy
  environment:
    name: staging-${SERVICE_NAME}
    url: https://staging-${SERVICE_NAME}.brickblock-cloud.io
  only:
    - master
  tags:
    - google
  variables:
    MYSQL_DATABASE: staging_claim_brk
    MYSQL_INSTANCE: sonorous-cacao-185213:europe-west1:ico-claimants-data
  script:
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_JOB_TOKEN
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOSTNAME}/infrastructure/infra.git
    - /bin/bash $(pwd)/infra/k8s-db/deploy.sh staging-${SERVICE_NAME}

deploy-production:
  stage: deploy
  environment:
    name: production-${SERVICE_NAME}
    url: https://production-${SERVICE_NAME}.brickblock-cloud.io
  script:
  tags:
    - google
  variables:
    MYSQL_DATABASE: production_claim_brk
    MYSQL_INSTANCE: sonorous-cacao-185213:europe-west1:production-claim-brk
  script:
    - docker login $CI_REGISTRY -u gitlab-ci-token -p $CI_JOB_TOKEN
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_HOSTNAME}/infrastructure/infra.git
    - /bin/bash $(pwd)/infra/k8s-db/deploy.sh production-${SERVICE_NAME}
# These two 'onlys' give us AND logic. The commit should both be in master AND be tagged. NB. this is git tagging. not 'gitlab' tagging.
  only:
    - master
  only:
    - tags

